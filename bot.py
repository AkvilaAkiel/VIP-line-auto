from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.utils import exceptions
from aiohttp import web
import asyncio
from collections import deque
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –∏ URL –¥–ª—è Webhook
API_TOKEN = os.getenv('API_TOKEN', '–í–ê–®_–¢–û–ö–ï–ù')
WEBHOOK_PATH = '/webhook'
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST', 'https://–í–ê–®_URL.onrender.com')
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# ID –≥—Ä—É–ø–ø—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
GROUP_CHAT_ID = os.getenv('GROUP_CHAT_ID')
if not GROUP_CHAT_ID:
    logging.error("GROUP_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è!")
    raise ValueError("GROUP_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è")
GROUP_CHAT_ID = int(GROUP_CHAT_ID)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
queue = deque()  # –û—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ö—Ä–∞–Ω–∏—Ç user_id)
current_break_user = None  # –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ (user_id)
pending_break_user = None  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–∂–∏–¥–∞—é—â–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞ (user_id)
break_duration = 600  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
break_button = InlineKeyboardMarkup()
break_button.add(InlineKeyboardButton("–ù–∞ –ø–µ—Ä–µ—Ä–≤—É ‚ö°Ô∏è", callback_data="go_break"))

start_break_button = InlineKeyboardMarkup()
start_break_button.add(InlineKeyboardButton("–ü–æ—á–∞—Ç–∏ –ø–µ—Ä–µ—Ä–≤—É ‚ö°Ô∏è", callback_data="start_break"))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏
def get_clickable_name(user_id, user_name):
    return f"<a href='tg://user?id={user_id}'>{user_name}</a>"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if message.chat.id != GROUP_CHAT_ID:
        await message.reply("–¶–µ–π –±–æ—Ç –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –≤ –ø–µ–≤–Ω—ñ–π –≥—Ä—É–ø—ñ!")
        logging.info(f"–°–ø—Ä–æ–±–∞ /start —É –Ω–µ–≤—ñ—Ä–Ω–æ–º—É —á–∞—Ç—ñ {message.chat.id}")
        return
    await message.reply(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–º–∏. –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø—ñ—Ç–∏ –Ω–∞ –ø–µ—Ä–µ—Ä–≤—É –∞–±–æ –≤—Å—Ç–∞—Ç–∏ –≤ —á–µ—Ä–≥—É. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–µ—Ä–≥—É - /queue.",
        reply_markup=break_button
    )
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start —É –≥—Ä—É–ø—ñ {GROUP_CHAT_ID}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /queue
@dp.message_handler(commands=['queue'])
async def show_queue(message: types.Message):
    if message.chat.id != GROUP_CHAT_ID:
        await message.reply("–¶–µ–π –±–æ—Ç –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –≤ –ø–µ–≤–Ω—ñ–π –≥—Ä—É–ø—ñ!")
        logging.info(f"–°–ø—Ä–æ–±–∞ /queue —É –Ω–µ–≤—ñ—Ä–Ω–æ–º—É —á–∞—Ç—ñ {message.chat.id}")
        return
    queue_text = []
    if current_break_user:
        try:
            user = await bot.get_chat_member(chat_id=GROUP_CHAT_ID, user_id=current_break_user)
            user_name = user.user.first_name or user.user.username or str(current_break_user)
            queue_text.append(f"–ù–∞ –ø–µ—Ä–µ—Ä–≤—ñ: {get_clickable_name(current_break_user, user_name)}")
        except Exception as e:
            queue_text.append(f"–ù–∞ –ø–µ—Ä–µ—Ä–≤—ñ: User ID: {current_break_user} (–ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ)")
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –¥–ª—è current_break_user {current_break_user}: {str(e)}")
    if pending_break_user:
        try:
            user = await bot.get_chat_member(chat_id=GROUP_CHAT_ID, user_id=pending_break_user)
            user_name = user.user.first_name or user.user.username or str(pending_break_user)
            queue_text.append(f"–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {get_clickable_name(pending_break_user, user_name)}")
        except Exception as e:
            queue_text.append(f"–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: User ID: {pending_break_user} (–ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ)")
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –¥–ª—è pending_break_user {pending_break_user}: {str(e)}")
    if queue:
        for i, user_id in enumerate(queue):
            try:
                user = await bot.get_chat_member(chat_id=GROUP_CHAT_ID, user_id=user_id)
                user_name = user.user.first_name or user.user.username or str(user_id)
                queue_text.append(f"{i+1}. {get_clickable_name(user_id, user_name)}")
            except Exception as e:
                queue_text.append(f"{i+1}. User ID: {user_id} (–ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ)")
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –¥–ª—è user_id {user_id}: {str(e)}")
    if not queue_text:
        await message.reply("–ù—ñ–∫–æ–≥–æ –≤ —á–µ—Ä–∑—ñ!")
        logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /queue —É –≥—Ä—É–ø—ñ {GROUP_CHAT_ID}: –Ω—ñ–∫–æ–≥–æ –≤ —á–µ—Ä–∑—ñ")
    else:
        await message.reply(f"–ü–æ—Ç–æ—á–Ω–∞ —á–µ—Ä–≥–∞:\n" + "\n".join(queue_text), parse_mode="HTML")
        logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /queue —É –≥—Ä—É–ø—ñ {GROUP_CHAT_ID}: –ø–æ–∫–∞–∑–∞–Ω–∞ —á–µ—Ä–≥–∞\n" + "\n".join(queue_text))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
@dp.message_handler(commands=['cancel'])
async def cancel_break(message: types.Message):
    if message.chat.id != GROUP_CHAT_ID:
        await message.reply("–¶–µ–π –±–æ—Ç –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –≤ –ø–µ–≤–Ω—ñ–π –≥—Ä—É–ø—ñ!")
        logging.info(f"–°–ø—Ä–æ–±–∞ /cancel —É –Ω–µ–≤—ñ—Ä–Ω–æ–º—É —á–∞—Ç—ñ {message.chat.id}")
        return
    global current_break_user, pending_break_user, queue
    user_id = message.from_user.id
    user_name = message.from_user.first_name or message.from_user.username or str(user_id)
    clickable_name = get_clickable_name(user_id, user_name)
    if user_id == current_break_user:
        current_break_user = None
        await message.reply(f"{clickable_name}, —Ç–≤–æ—é –ø–µ—Ä–µ—Ä–≤—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ! üö™", parse_mode="HTML")
        logging.info(f"{user_name} (ID: {user_id}) –ø–µ—Ä–µ—Ä–≤—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
    elif user_id == pending_break_user:
        pending_break_user = None
        await message.reply(f"{clickable_name}, —Ç–∏ –≤—ñ–¥–º–æ–≤–∏–≤—Å—è –≤—ñ–¥ –ø–µ—Ä–µ—Ä–≤–∏.", parse_mode="HTML")
        logging.info(f"{user_name} (ID: {user_id}) –≤—ñ–¥–º–æ–≤–∏–≤—Å—è –≤—ñ–¥ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∏")
    elif user_id in queue:
        queue.remove(user_id)
        await message.reply(f"{clickable_name} üö™, —Ç–µ–±–µ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —á–µ—Ä–≥–∏!", parse_mode="HTML")
        logging.info(f"{user_name} (ID: {user_id}) –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —á–µ—Ä–≥–∏")
    else:
        await message.reply(f"{clickable_name}, —Ç–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–µ—Ä–≤—ñ, –Ω–µ –≤ —á–µ—Ä–∑—ñ –π –Ω–µ –æ—á—ñ–∫—É—î—à –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è!", parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /swap
@dp.message_handler(commands=['swap'])
async def swap_queue_position(message: types.Message):
    if message.chat.id != GROUP_CHAT_ID:
        await message.reply("–¶–µ–π –±–æ—Ç –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –≤ –ø–µ–≤–Ω—ñ–π –≥—Ä—É–ø—ñ!")
        logging.info(f"–°–ø—Ä–æ–±–∞ /swap —É –Ω–µ–≤—ñ—Ä–Ω–æ–º—É —á–∞—Ç—ñ {message.chat.id}")
        return
    initiator_id = message.from_user.id
    initiator_name = message.from_user.first_name or message.from_user.username or str(initiator_id)
    initiator_clickable = get_clickable_name(initiator_id, initiator_name)
    if initiator_id not in queue:
        await message.reply(f"{initiator_clickable}, —Ç–∏ –Ω–µ –≤ —á–µ—Ä–∑—ñ!", parse_mode="HTML")
        return
    if not message.entities:
        await message.reply("–í–∫–∞–∂–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ @username! –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /swap @User")
        return
    target_id = None
    target_name = None
    for entity in message.entities:
        if entity.type in ["mention", "text_mention"]:
            if entity.type == "text_mention":
                target_id = entity.user.id
                target_name = entity.user.first_name or entity.user.username or str(target_id)
            elif entity.type == "mention":
                username = message.text[entity.offset:entity.offset + entity.length].lstrip('@')
                try:
                    for user_id in queue:
                        user = await bot.get_chat_member(chat_id=GROUP_CHAT_ID, user_id=user_id)
                        if user.user.username and user.user.username.lstrip('@') == username:
                            target_id = user_id
                            target_name = user.user.first_name or user.user.username or str(user_id)
                            break
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ username {username}: {str(e)}")
    if not target_id:
        await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∫–∞–∑–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞! –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ @username –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –≥—Ä—É–ø—ñ.")
        return
    if target_id not in queue:
        await message.reply(f"{get_clickable_name(target_id, target_name)}, –Ω–µ –≤ —á–µ—Ä–∑—ñ!", parse_mode="HTML")
        return
    if initiator_id == target_id:
        await message.reply(f"{initiator_clickable}, –Ω–µ –º–æ–∂–Ω–∞ –º—ñ–Ω—è—Ç–∏—Å—è –∑ —Å–∞–º–∏–º —Å–æ–±–æ—é!", parse_mode="HTML")
        return
    initiator_idx = list(queue).index(initiator_id)
    target_idx = list(queue).index(target_id)
    queue[initiator_idx], queue[target_idx] = queue[target_idx], queue[initiator_idx]
    await message.reply(
        f"{initiator_clickable} üîÑ {get_clickable_name(target_id, target_name)} –ø–æ–º—ñ–Ω—è–ª–∏—Å—è –º—ñ—Å—Ü—è–º–∏ –≤ —á–µ—Ä–∑—ñ!",
        parse_mode="HTML"
    )
    logging.info(f"{initiator_name} (ID: {initiator_id}) —Ç–∞ {target_name} (ID: {target_id}) –ø–æ–º—ñ–Ω—è–ª–∏—Å—è –º—ñ—Å—Ü—è–º–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞ –ø–µ—Ä–µ—Ä–≤—É"
@dp.callback_query_handler(lambda c: c.data == "go_break")
async def process_break_request(callback_query: types.CallbackQuery):
global current_break_user, pending_break_user, queue
    user_id = callback_query.from_user.id
    user_name = callback_query.from_user.first_name or callback_query.from_user.username or str(user_id)
    clickable_name = get_clickable_name(user_id, user_name)
    if user_id == current_break_user:
        await callback_query.message.answer(f"{clickable_name}, —Ç–∏ –≤–∂–µ –Ω–∞ –ø–µ—Ä–µ—Ä–≤—ñ!", parse_mode="HTML")
        try:
            await callback_query.answer()
        except exceptions.InvalidQueryID as e:
            logging.warning(f"–ó–∞—Å—Ç–∞—Ä—ñ–ª–∏–π callback —É process_break_request: {str(e)}")
        return
    if user_id == pending_break_user:
        await callback_query.message.answer(f"{clickable_name}, —Ç–≤–æ—è —á–µ—Ä–≥–∞! –ù–∞—Ç–∏—Å–Ω–∏ '–ü–æ—á–∞—Ç–∏ –ø–µ—Ä–µ—Ä–≤—É ‚ö°Ô∏è', –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ.", parse_mode="HTML")
        try:
            await callback_query.answer()
        except exceptions.InvalidQueryID as e:
            logging.warning(f"–ó–∞—Å—Ç–∞—Ä—ñ–ª–∏–π callback —É process_break_request: {str(e)}")
        return
    if user_id in queue:
        await callback_query.message.answer(f"{clickable_name}, —Ç–∏ –≤–∂–µ –≤ —á–µ—Ä–∑—ñ!", parse_mode="HTML")
        try:
            await callback_query.answer()
        except exceptions.InvalidQueryID as e:
            logging.warning(f"–ó–∞—Å—Ç–∞—Ä—ñ–ª–∏–π callback —É process_break_request: {str(e)}")
        return
    if not queue and current_break_user is None and pending_break_user is None:
        current_break_user = user_id
        await callback_query.message.answer(
            f"{clickable_name}, –ø–µ—Ä–µ—Ä–≤—É —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –£ —Ç–µ–±–µ 10 —Ö–≤–∏–ª–∏–Ω. ‚úÖ", parse_mode="HTML"
        )
        logging.info(f"{user_name} (ID: {user_id}) –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—á–∞–≤ –ø–µ—Ä–µ—Ä–≤—É –≤ –≥—Ä—É–ø—ñ {GROUP_CHAT_ID}")
        asyncio.create_task(break_timer(user_id, user_name))
    else:
        queue.append(user_id)
        await callback_query.message.answer(
            f"{clickable_name}, —Ç–µ–±–µ –¥–æ–¥–∞–Ω–æ –¥–æ —á–µ—Ä–≥–∏! üü® –ü–æ–∑–∏—Ü—ñ—è: {len(queue)}",
            parse_mode="HTML"
        )
        logging.info(f"{user_name} (ID: {user_id}) –¥–æ–¥–∞–Ω–æ –¥–æ —á–µ—Ä–≥–∏ –≤ –≥—Ä—É–ø—ñ {GROUP_CHAT_ID}, –ø–æ–∑–∏—Ü—ñ—è: {len(queue)}")
    try:
        await callback_query.answer()
    except exceptions.InvalidQueryID as e:
        logging.warning(f"–ó–∞—Å—Ç–∞—Ä—ñ–ª–∏–π callback —É process_break_request: {str(e)}")
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—á–∞—Ç–∏ –ø–µ—Ä–µ—Ä–≤—É"
@dp.callback_query_handler(lambda c: c.data == "start_break")
async def start_break(callback_query: types.CallbackQuery):
    if callback_query.message.chat.id != GROUP_CHAT_ID:
        await callback_query.message.answer("–¶–µ–π –±–æ—Ç –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –≤ –ø–µ–≤–Ω—ñ–π –≥—Ä—É–ø—ñ!")
        try:
            await callback_query.answer()
        except exceptions.InvalidQueryID as e:
            logging.warning(f"–ó–∞—Å—Ç–∞—Ä—ñ–ª–∏–π callback —É start_break: {str(e)}")
        return
    global current_break_user, pending_break_user
    user_id = callback_query.from_user.id
    user_name = callback_query.from_user.first_name or callback_query.from_user.username or str(user_id)
    clickable_name = get_clickable_name(user_id, user_name)
    if user_id == pending_break_user:
        current_break_user = user_id
        pending_break_user = None
        await callback_query.message.answer(
            f"{clickable_name}, –ø–µ—Ä–µ—Ä–≤—É —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –£ —Ç–µ–±–µ 10 —Ö–≤–∏–ª–∏–Ω. ‚úÖ", parse_mode="HTML"
        )
        logging.info(f"{user_name} (ID: {user_id}) –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—á–∞–≤ –ø–µ—Ä–µ—Ä–≤—É –≤ –≥—Ä—É–ø—ñ {GROUP_CHAT_ID}")
        asyncio.create_task(break_timer(user_id, user_name))
    else:
        await callback_query.message.answer(f"{clickable_name}, —Ü–µ –Ω–µ —Ç–≤–æ—è —á–µ—Ä–≥–∞! üü•", parse_mode="HTML")
        logging.info(f"{user_name} (ID: {user_id}) –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–º–∞–≥–∞–≤—Å—è –ø–æ—á–∞—Ç–∏ –ø–µ—Ä–µ—Ä–≤—É –Ω–µ –≤ —Å–≤–æ—é —á–µ—Ä–≥—É –≤ –≥—Ä—É–ø—ñ {GROUP_CHAT_ID}")
    try:
        await callback_query.answer()
    except exceptions.InvalidQueryID as e:
        logging.warning(f"–ó–∞—Å—Ç–∞—Ä—ñ–ª–∏–π callback —É start_break: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞
async def break_timer(user_id, user_name):
    try:
        await asyncio.sleep(break_duration)
        global current_break_user, pending_break_user, queue
        clickable_name = get_clickable_name(user_id, user_name)
        await bot.send_message(
            GROUP_CHAT_ID,
            f"{clickable_name}, —Ç–≤–æ—è –ø–µ—Ä–µ—Ä–≤–∞ –¥–æ–±—ñ–≥–ª–∞ –∫—ñ–Ω—Ü—è! üîö",
            parse_mode="HTML"
        )
        logging.info(f"{user_name} (ID: {user_id}) –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–µ—Ä—à–∏–≤ –ø–µ—Ä–µ—Ä–≤—É –≤ –≥—Ä—É–ø—ñ {GROUP_CHAT_ID}")
        if queue:
            next_user_id = queue.popleft()
            next_user = await bot.get_chat_member(chat_id=GROUP_CHAT_ID, user_id=next_user_id)
            next_user_name = next_user.user.first_name or next_user.user.username or str(next_user_id)
            pending_break_user = next_user_id
            await bot.send_message(
                next_user_id,
                f"{next_user_name}, —Ç–≤–æ—è —á–µ—Ä–≥–∞ –Ω–∞ –ø–µ—Ä–µ—Ä–≤—É! ‚ö°Ô∏è –ù–∞—Ç–∏—Å–Ω–∏ '–ü–æ—á–∞—Ç–∏ –ø–µ—Ä–µ—Ä–≤—É', –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ.",
                reply_markup=start_break_button
            )
            logging.info(f"{next_user_name} (ID: {next_user_id}) –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–æ —Å–≤–æ—é —á–µ—Ä–≥—É –≤ –≥—Ä—É–ø—ñ {GROUP_CHAT_ID}")
        else:
            current_break_user = None
            logging.info(f"–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è, –ø–µ—Ä–µ—Ä–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≤ –≥—Ä—É–ø—ñ {GROUP_CHAT_ID}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ break_timer –¥–ª—è {user_name} (ID: {user_id}) —É –≥—Ä—É–ø—ñ {GROUP_CHAT_ID}: {str(e)}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def on_startup(_):
    webhook_info = await bot.get_webhook_info()
    if webhook_info.url != WEBHOOK_URL:
        await bot.set_webhook(url=WEBHOOK_URL)
        logging.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")
    else:
        logging.info(f"Webhook –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Webhook
async def webhook(request):
    update = await request.json()
    update = types.Update(**update)
    await dp.process_update(update)
    return web.Response()

# –°–æ–∑–¥–∞–Ω–∏–µ aiohttp —Å–µ—Ä–≤–µ—Ä–∞
app = web.Application()
app.router.add_post(WEBHOOK_PATH, webhook)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        skip_updates=True,
        host='0.0.0.0',
        port=int(os.getenv('PORT', 8000))
    )
