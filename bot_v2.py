import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes
)
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

# –ß–µ—Ä–≥–∞ —Ç–∞ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
queue = []
current_user = None
BREAK_DURATION = 600  # 10 —Ö–≤–∏–ª–∏–Ω

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –ö–æ–º–∞–Ω–¥–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üü¢ –£ —á–µ—Ä–≥—É", callback_data='join')],
        [InlineKeyboardButton("üîö –í–∏–π—Ç–∏", callback_data='leave')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç —á–µ—Ä–≥–∏ –Ω–∞ –ø–µ—Ä–µ—Ä–≤—É.", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'join':
        await join(update, context)
    elif query.data == 'leave':
        await leave(update, context)

async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_user
    user = update.effective_user

    if user.id in [u.id for u in queue] or (current_user and current_user.id == user.id):
        await context.bot.send_message(chat_id=user.id, text="‚è≥ –í–∏ –≤–∂–µ —É —á–µ—Ä–∑—ñ –∞–±–æ –Ω–∞ –ø–µ—Ä–µ—Ä–≤—ñ.")
        return

    queue.append(user)
    await context.bot.send_message(chat_id=user.id, text="‚úÖ –í–∏ –¥–æ–¥–∞–Ω—ñ –¥–æ —á–µ—Ä–≥–∏.")

    if not current_user:
        await start_break(context)

async def leave(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_user
    user = update.effective_user

    if current_user and user.id == current_user.id:
        current_user = None
        await context.bot.send_message(chat_id=user.id, text="‚ùå –í–∏ –≤–∏–π—à–ª–∏ –∑ –ø–µ—Ä–µ—Ä–≤–∏.")
        await start_break(context)
        return

    for u in queue:
        if u.id == user.id:
            queue.remove(u)
            await context.bot.send_message(chat_id=user.id, text="‚ùå –í–∏ –≤–∏–π—à–ª–∏ –∑ —á–µ—Ä–≥–∏.")
            return

    await context.bot.send_message(chat_id=user.id, text="ü§∑‚Äç‚ôÇÔ∏è –í–∞—Å –Ω–µ–º–∞—î –≤ —á–µ—Ä–∑—ñ.")

async def start_break(context: ContextTypes.DEFAULT_TYPE):
    global current_user
    if not queue:
        return

    current_user = queue.pop(0)
    await context.bot.send_message(chat_id=current_user.id, text="üö® –í–∞—à–∞ —á–µ—Ä–≥–∞ –Ω–∞ –ø–µ—Ä–µ—Ä–≤—É! 10 —Ö–≤–∏–ª–∏–Ω ‚è±")
    await asyncio.sleep(BREAK_DURATION)
    await context.bot.send_message(chat_id=current_user.id, text="‚è∞ –ü–µ—Ä–µ—Ä–≤–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å!")
    current_user = None
    await start_break(context)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    import os
    TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()
